{"version":3,"sources":["components/ResultLog.js","components/CalculatorForm.js","App.js","serviceWorker.js","index.js"],"names":["ResultLog","react_default","a","createElement","this","props","resultLog","reverse","slice","map","result","key","Component","CalculatorForm","state","firstValue","secondValue","resultArray","divisionSymbol","arrayClear","handleInput","ev","_this","setState","Object","defineProperty","target","name","parseFloat","value","handleButton","results","concat","fetch","method","headers","Content-Type","Accept","body","JSON","stringify","then","resp","json","toFixed","alert","handleClear","isClear","type","placeholder","onChange","required","onClick","className","id","components_ResultLog","App","components_CalculatorForm","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.2dd7f8b6.chunk.js","sourcesContent":["import React, {Component} from 'react';\n\nclass ResultLog extends Component{\n\n  // componentDidMount(){\n  //\n  //   fetch(\"http://localhost:3000/logs\")\n  //   .then(resp => resp.json())\n  //   .then(json=>{\n  //     console.log(json)\n  //   })\n  // }\n\n  render(){\n    return(\n      <div>\n      Result Logs:\n      <ul>\n      {\n        //slice to limit 10 results display\n        this.props.resultLog.reverse().slice(0,10).map((result, key) =>{\n          return <div key={key}>result: {result}</div>\n        })\n      }\n      </ul>\n      </div>\n    )\n\n  }\n}\n\nexport default ResultLog;\n","import React, {Component} from 'react';\nimport ResultLog from \"./ResultLog\";\n\nclass CalculatorForm extends Component{\n\n  state={firstValue: \"\", secondValue: \"\", resultArray: [], divisionSymbol: \"\\xF7\",\narrayClear: true}\n\n\n  handleInput = (ev)=>{\n    this.setState({[ev.target.name]: parseFloat(ev.target.value)})\n  }\n\n  handleButton = (ev)=>{\n    let results =\"\";\n    if(!this.state.firstValue || !this.state.secondValue){\n      alert(\"please enter a valid number.\")\n    }\n    else{\n      switch (ev.target.name){\n        case \"addition\":\n        results = `${this.state.firstValue}+ ${this.state.secondValue} = ${this.state.firstValue + this.state.secondValue}`;\n        //fetch & update the backend results\n        fetch('http://localhost:3000/logs/1',{\n        method: 'PATCH',\n        headers:{'Content-Type': 'application/json',\n          Accept: 'application/json'},\n          body: JSON.stringify({results} )\n        })\n        .then(resp => resp.json())\n        .then(json =>{\n          this.setState({resultArray: json.results})\n        })\n        break;\n\n        case \"subtraction\":\n        results = `${this.state.firstValue} - ${this.state.secondValue} = ${this.state.firstValue - this.state.secondValue}`\n        fetch('http://localhost:3000/logs/1',{\n        method: 'PATCH',\n        headers:{'Content-Type': 'application/json',\n          Accept: 'application/json'},\n          body: JSON.stringify({results} )\n        })\n        .then(resp => resp.json())\n        .then(json =>{\n          this.setState({resultArray: json.results})\n        })\n        break;\n\n        case \"multiplication\":\n        results = `${this.state.firstValue} x ${this.state.secondValue} = ${this.state.firstValue * this.state.secondValue}`\n        fetch('http://localhost:3000/logs/1',{\n        method: 'PATCH',\n        headers:{'Content-Type': 'application/json',\n          Accept: 'application/json'},\n          body: JSON.stringify({results} )\n        })\n        .then(resp => resp.json())\n        .then(json =>{\n          this.setState({resultArray: json.results})\n        })\n        break;\n\n        case \"division\":\n        results = `${this.state.firstValue} \\xF7 ${this.state.secondValue} = ${(this.state.firstValue / this.state.secondValue).toFixed(2)}`\n        fetch('http://localhost:3000/logs/1',{\n        method: 'PATCH',\n        headers:{'Content-Type': 'application/json',\n          Accept: 'application/json'},\n          body: JSON.stringify({results} )\n        })\n        .then(resp => resp.json())\n        .then(json =>{\n          this.setState({resultArray: json.results})\n        })\n        break;\n\n        default: break\n      }\n    }\n  }\n\n  handleClear = ev =>{\n    let isClear = this.state.arrayClear;\n    fetch('http://localhost:3000/logs/1',{\n    method: 'PATCH',\n    headers:{'Content-Type': 'application/json',\n      Accept: 'application/json'},\n      body: JSON.stringify({isClear} )\n    })\n  }\n  render(){\n    return(\n      <div>\n      <h1>Tutor Calculator</h1>\n      <input type=\"number\" placeholder=\"first number\" name=\"firstValue\"\n      onChange={this.handleInput} value={this.state.firstValue} required/><br/>\n      <input type=\"number\" placeholder=\"second number\" name=\"secondValue\"\n      onChange={this.handleInput} value={this.state.secondValue} required/> <br/><br/>\n\n      <button onClick={this.handleButton} name=\"addition\" className=\"CB\">+</button>{\" \"}\n      <button onClick={this.handleButton} name=\"subtraction\" className=\"CB\">-</button>{\" \"}\n      <button onClick={this.handleButton} name=\"multiplication\" className=\"CB\">x</button>{\" \"}\n      <button onClick={this.handleButton} name=\"division\" className=\"CB\">{this.state.divisionSymbol}</button>\n      <hr/>\n      <button onClick={this.handleClear} name=\"clearArray\">Clear Logs</button>\n      <div id=\"resultSection\" >\n      <ResultLog resultLog={this.state.resultArray} />\n      </div>\n      </div>\n    )\n  }\n}\n\nexport default CalculatorForm;\n","import React from 'react';\nimport './App.css';\nimport CalculatorForm from \"./components/CalculatorForm\";\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n      <CalculatorForm />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}